// Copyright TimbreWorks Embedded Corporation 1990, 2012

void _CR(void);
void ABORT(void);
void ABS(void);
void AGAIN(void);
void AHEAD(void);
void ALIGN(void);
void aligned(void);
void ALLOT(void);
void AND(void);
void autoEchoOff(void);
void autoEchoOn(void);
void base(void);
void BEGIN(void);
void BIN(void);
void BITS_DIFFER_QUERY(void);
void BL(void);
void BRANCH(void);
void C_COMMA(void);
void C_FETCH_PLUS(void);
void C_FETCH(void);
void C_PLUS_STORE(void);
void C_STORE_PLUS(void);
void C_STORE(void);
void CELL(void);
void CELLS(void);
void CHAR(void);
void CMOVE(void);
void COLLECT(void);
void COLLECTOR(void);
void COLON(void);
void COMMA(void);
void COMMENT(void);
void COMPARE(void);
void compile(void);
void compileIt(Cell);
void CONSTANT(void);
void CONVERT_DIGIT(void);
void CONVERT_NUMBER(void);
void COUNT(void);
void CREATE(void);
void DECIMAL(void);
void DEPTH(void);
void DIFFER_QUERY(void);
void DIGIT(void);
void DIGITS_QUERY(void);
void DIGITS(void);
void DOT_PROMPT(void);
void DOT_QUOTE(void);
void DOT_R(void);
void DOT(void);
void dp(void);
void DROP(void);
void DUP(void);
void ELSE(void);
void EMIT(void);
void END_NUMBER_CONVERSION(void);
void ENDIF(void);
void EQUALS(void);
void ERASE(void);
void error(void);
void EXECUTE(void);
void EXIT(void);
void FETCH_MINUS(void);
void FETCH_PLUS(void);
void FETCH(void);
void FILL(void);
void FIND_QUERY(void);
void FOR(void);
void GREATER_THAN(void);
void HEADER(void);
void HERE(void);
void HEX(void);
void HOLD(void);
void I_FROM(void);
void IF(void);
void in(void);
void INIT(void);
void INPUT(void);
void INTERPRET(void);
void KEY_QUERY(void);
void KEY(void);
void L_TO_LINK(void);
void L_TO_NAME(void);
void L_TO_TICK(void);
void latest(void);
void LEFT_SQUARE_BRACKET(void);
void LESS_THAN_CMOVE(void);
void LESS_THAN(void);
void LIT(void);
void LITERAL(void);
void longFetch(void);
void longStore(void);
void LOWERCASE(void);
void MAKE_LINK(void);
void MAKE_NAME(void);
void MAX(void);
void MEMCMP(void);
void MIN(void);
void MINUS_BITS(void);
void MINUS_BRANCH(void);
void MINUS(void);
void MOD(void);
void MOVE(void);
void N_TO_TICK(void);
void NAME_QUERY(void);
void NEGATE(void);
void NEGATIVE_QUERY(void);
void NEXT(void);
void NIP(void);
void NOT(void);
void NUMBER_QUERY(void);
void NUMBER(void);
void NUP(void);
void OR(void);
void out(void);
void OVER(void);
void PAD(void);
void PARSE(void);
void peasantq(void);
void PLUS_BITS(void);
void PLUS_IN(void);
void PLUS(void);
void PREFIXED_QUERY(void);
void prompt(void);
void PULL(void);
void PUSH(void);
void Q_QUERY(void);
void Q(void);
void QUESTION_CR(void);
void QUESTION_DUP(void);
void QUESTION_ERROR(void);
void QUESTION_EXECUTE(void);
void QUESTION_FIND(void);
void QUIT(void);
void QUOTE(void);
void R_FROM(void);
void R(void);
void RECURSIVE(void);
void REPEAT(void);
void RESET_KERNEL(void);
void RIGHT_SQUARE_BRACKET(void);
void rp_0(void);
void RP_STORE(void);
void SAME_QUERY(void);
void SCAN(void);
void search_context(void);
void SEARCH_DICTIONARY(void);
void SEMI_COLON(void);
void SET_BASE(void);
void setPrompt(char *);
void shortFetch(void);
void shortStore(void);
void SIGN(void);
void SKIP_PREFIX(void);
void SKIP(void);
void SLASH_MOD(void);
void SLASH(void);
void SMUDGE(void);
void sp_0(void);
void SP_STORE(void);
void SPACE(void);
void SPACES(void);
void STAR(void);
void START_NUMBER_CONVERSION(void);
void STORE_PLUS(void);
void STORE(void);
void STRING(void);
void SWAP(void);
void tib(void);
void TICK(void);
Byte toDigit(Byte *n);
void TO_I(void);
void TO_R(void);
void TUCK(void);
void TWO_DROP(void);
void TWO_DUP(void);
void TWO_SLASH(void);
void TWO_STAR(void);
void TYPE(void);
void U_2_SLASH(void);
void U_GREATER_THAN(void);
void U_LESS_THAN(void);
void UNTIL(void);
void VARIABLE(void);
void WHILE(void);
void WORD(void);
void XOR(void);
void ZERO_BRANCH(void);
void ZERO_Q(void);
void ZERO_TIB(void);
