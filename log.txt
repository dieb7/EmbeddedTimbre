Log for SFP
 This log is kept with the source code and is refined as the source code changes
 providing a human readable summary of the past, present and future of the code
 base. As issues are encountered, they are entered under the Issues: section. As
 they are resolved or things are changed, they are entered under the Updates:
 section. Once they are no longer relavent, they are removed. The repository will
 contain tags or major milestones which delineate these removals so as to serve
 as a signpost in the source code development preventing the accumulation of clutter.

Issues:
 1. should add structure to machines to allow for loop times to be stored. This would
 enable tracking hot machines or ones that might need attention. Generalize the name
 machine structure to include extra structures for such things like on the fly stats
 but it must be efficient to minimize overhead when collecting stats on the fly. Maybe
 this is a move towards structures for machines declared at compile time and then used
 at run time. Right now a machine cycle is monitored not individual machines. If machine
 queue had pointers to machine structurs, then it would be easy to add extra features.
 If they were executable structures then they could be intermixed with unnamed machines.
 Not all calculations should be done each run. Only gather min stats and leave
 calculations for when asked.
 The question is how to connect the function address with a data structure that keeps
 stats about it. Could put all the stats into a queue which is processed by a machine
 whose task is to process the queue stats.

  Long time = getTime();
  		machine();
  time = getTime() - time;
  pushq(machine, mstatsq), pushq(time, mstatsq);
  
	void mstatsMachine(void)
	{
		while (queryq(mstatsq)) {
			m = pullq(mstatsq);
			t = pullq(mstatsq);
			ms = findMachineStruct(m);
			if (ms) {
				ms->maxtime = max(t, ms->maxtime);
				ms->mintime = min(t, ms->mintime);
				ms->sumtime += t;
				ms->times++
			}
		}
		activate(mstatsMachine);
	}
	
	void machineProfile(void)
	{
		for all machine structs...
	}
	
	What if activate cycled a queue around which kept the stats. Then when reporting
	the name lookup would occur. problem: assumes recurrent machine. Need to support
	transient machines. Need a way of declaring machines at run time on startup so
	their name can be associated with an address. Kind of like ActivateOnce but 
	separate from activation; just declaration.
	This should be part of C++ version of machines.
 2. timeouts should be like queues and not require an & in front of them to reference
    them.
 3. It would be nice to have an unsigned decimal printout in printers.c but as one
    adds more features the API starts to expand quickly. Perhaps options that are
    selectable that are themselves part of the API such as unsigned(void) that apply
    widely. With an overloaded C++ interface this would work nicely.
 5. Provide a kill command to delete a machine from the machine queue from the command
    line. To aid in debugging.
 6. Perhaps queues should be of void * instead of Cell and then anything can be stored
    in there.
 7. Timestamp should be a typedef used by all time references instead of Long.
 9. Should protect against long prompts in setPrompt.
11. Consider adding writeP or writeQ to queues.h where these allow overwriting the
    current value at either end of the queue. Very useful for stacks. q, writeQ along
    with pullq and stuffq would be more efficient for stack operations.
12. Unify byte queue and queue. QINSERT and BQINSERT are the same. Again with the C++.
13. Consider CLI macro building as an extra part which can be included or not.
14. Add dotnb to printers.h. Consider a different name: printn?
15. Fold timeouts into machines. For low power implementations, the time to next timeout
    is used to put the micro to sleep for that time. Machines are all run through the
    queue and if a start timeout or check timeout occurs, the time to the timeout is noted
    and used as a sleep time. The machines which don't use timeouts will continue to run
    and will draw power. In an ideal system there are only interrupts which might schedule
    machiens to do work. There might also be timeouts to timebox algorithms and interfaces.
    If a machine keeps running then it would keep the machine queue alive. But if all the
    machines in the queue are just time machines, then the micro can go to sleep for the
    shortest timeout. This might work better with C++ where instances of time machines
    woudl exist. The user would be aware in the programming of using time machines, state
    machines and perpetual machines.
16. Optionally include a name after Words in the word list file which can be used to sort
    words in to separate lists. Then when printed, instead of one list, there would be words
    grouped. This would make it easier to find words. This would apply to help and to
    words.
17. Detect stack underflow and issue a message and correct.

Updates:
 4.  [4.] Should move from botkernel to timbre. bktypes -> ttypes, botkernl -> timbre etc
   - done with new release. Now command line interface is all moved into one file, cli.c
     and cleaned up. The stacks and memory should all be safe so no commands can crash it.
     [8.] Move cli.[ch] into Timbre. They are generic and enabling.
     [10.] INIT() uses stack but it might not be ok to use it. Perhaps the whole INIT QUIT and
     RESET_KERNEL thing should be rethought. timbre: gets output as a prompt before the
     software is up and running and looks unprofessional. It is hystorical and should be
     cleaned up. Adding to issue 4, the whole cli should be refactored, cleaned up and
     unit tested. The standard 95 words in clibindings should be the basis for the
     word set.
