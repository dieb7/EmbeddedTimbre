Log for SFP
 This log is kept with the source code and is refined as the source code changes
 providing a human readable summary of the past, present and future of the code
 base. As issues are encountered, they are entered under the Issues: section. As
 they are resolved or things are changed, they are entered under the Updates:
 section. Once they are no longer relavent, they are removed. The repository will
 contain tags or major milestones which delineate these removals so as to serve
 as a signpost in the source code development preventing the accumulation of clutter.

Issues:
 1. should add structure to machines to allow for loop times to be stored. This would
 enable tracking hot machines or ones that might need attention. Generalize the name
 machine structure to include extra structures for such things like on the fly stats
 but it must be efficient to minimize overhead when collecting stats on the fly. Maybe
 this is a move towards structures for machines declared at compile time and then used
 at run time. Right now a machine cycle is monitored not individual machines. If machine
 queue had pointers to machine structurs, then it would be easy to add extra features.
 If they were executable structures then they could be intermixed with unnamed machines.
 Not all calculations should be done each run. Only gather min stats and leave
 calculations for when asked.
 The question is how to connect the function address with a data structure that keeps
 stats about it. Could put all the stats into a queue which is processed by a machine
 whose task is to process the queue stats.

  Long time = getTime();
  		machine();
  time = getTime() - time;
  pushq(machine, mstatsq), pushq(time, mstatsq);
  
	void mstatsMachine(void)
	{
		while (queryq(mstatsq)) {
			m = pullq(mstatsq);
			t = pullq(mstatsq);
			ms = findMachineStruct(m);
			if (ms) {
				ms->maxtime = max(t, ms->maxtime);
				ms->mintime = min(t, ms->mintime);
				ms->sumtime += t;
				ms->times++
			}
		}
		activate(mstatsMachine);
	}
	
	void machineProfile(void)
	{
		for all machine structs...
	}
	
	What if activate cycled a queue around which kept the stats. Then when reporting
	the name lookup would occur. problem: assumes recurrent machine. Need to support
	transient machines. Need a way of declaring machines at run time on startup so
	their name can be associated with an address. Kind of like ActivateOnce but 
	separate from activation; just declaration.
 2. timeouts should be like queues and not require an & in front of them to reference
    them.
 3. It would be nice to have an unsigned decimal printout in printers.c but as one
    adds more features the API starts to expand quickly. Perhaps options that are
    selectable that are themselves part of the API such as unsigned(void) that apply
    widely.

Updates:
 1. fixed bug in queues. p() never worked - it did the same as q()
