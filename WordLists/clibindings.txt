// Names and function binding for words, constants and immediates

Words 
// Kernel
	swap	SWAP // ( n m - m n ) swap top two items on the data stack
	dup	DUP // ( n - n n ) make a copy of the top data stack item
	drop	DROP // ( n - ) throw away the top data stack item
	>r	TO_R // ( n - ) (R - n ) push the top item of the data stack onto the return stack
	r	R // ( - n ) (R n - n ) copy the top item of the return stack onto the data stack
	r>	R_FROM //  ( - n ) (R n - ) move top item on return stack to data stack
	sp!	SP_STORE // ( ... - ) empty the data stack
	over	OVER // ( n m - n m n ) copy 2nd data stack item to top of data stack
	?dup	QUESTION_DUP // ( n - n n | - 0 ) duplicate top data stack item if not 0
	execute	EXECUTE // ( a - ) use the top data stack item as a function call
	and	AND // ( n m - p ) bitwise AND top two data stack items and leave on top
	or	OR //  ( n m - p ) bitwise OR top two data stack items and leave on top
	xor	XOR // ( n m - p ) bitwise XOR top two data stack items and leave on top
	not	NOT // ( n - n' ) invert all bits on the top data stack item
	+	PLUS // ( n m - p ) add top two data stack items and leave on top
	-	MINUS // ( n m - p ) subtract top data stack item from next item and leave on top
	negate	NEGATE // ( n - -n ) two's complement of top data stack item
	/mod	SLASH_MOD // ( n m - q r ) return divide and modulus from top item into next item
	/	SLASH // ( n m - q ) divide next data stack item by top and leave on top
	mod	MOD // ( n m - r ) modulus next data stack item by top and leave on top
	*	STAR // ( n m - p ) multiply next data stack item by top and leave on top
	=	EQUALS // ( n m - f ) leave a boolean on stack after equating top two data stack items
	<	LESS_THAN // ( n m - f ) leave a boolean on stack indicating if next is less than top
	>	GREATER_THAN // ( n m - f ) leave a boolean on stack indicating if next is greater than top
	u<	U_LESS_THAN  // ( u v - f ) leave a boolean on stack indicating if unsigned next is less than top
	u>	U_GREATER_THAN  // ( u b - f ) leave a boolean on stack indicating if unsigned next is greater than top
	abs	ABS // ( n - n|-n) top data stack item is made positive
	max	MAX // ( n m - n|m) leave maximum of top two stack items
	min	MIN //  ( n m - n|m) leave minimum of top two stack items
	@	FETCH // ( a - n ) return contents of memory using top stack item as the address (processor sized)
	!	STORE // ( n a - ) store next into memory using top as address (processor sized)
	c@	C_FETCH // ( a - c ) return contents of memory using top stack item as the address (8 bit)
	c!	C_STORE // ( c a - ) store next into memory using top as address (8 bit)
	s@	shortFetch // ( a - h ) return contents of memory using top stack item as the address (16 bit)
	s!	shortStore // ( h a - ) store next into memory using top as address (16 bit)
	+b  PLUS_BITS // ( b a - ) turn on b bits at address a: 0b10001 em +b
	-b 	MINUS_BITS // ( b a - ) turn off b bits at address a: 0b10001 em -b
	l@	longFetch // ( a - n )return contents of memory using top stack item as the address (32 bit)
	l!  longStore // (n a - )store next into memory using top as address (processor sized)
	cmove	CMOVE // ( s d n - ) move n bytes from s to d
	fill	FILL // ( s n x - )fill n bytes from s with x
	erase	ERASE // ( s n - ) erase n bytes from s
	here	HERE // ( - a ) return address of end of dictionary
	allot	ALLOT // ( n - ) reserve n bytes after end of dictionary
	c,	C_COMMA // ( c - ) allocate and 1 byte and put value in it
	,	COMMA // ( n - ) allocate 1 cell and put n into it
	koff	autoEchoOff // turn off automatic key echo
	kon		autoEchoOn // turn on automatic key echo
	emit	EMIT // ( c - ) send c to output device
	cr	_CR // send end of line to output device
	count	COUNT // ( a - a' c ) leave first character and incremented address on stack
	type	TYPE // ( a n - ) output n characters starting at a
	base	base // ( - a ) return address of number radix
	hex	HEX // interpret all following numbers as hex
	decimal	DECIMAL // interpret all subsequent numbers as decimal
	hold	HOLD // ( c - ) hold a character in number sequence
	<#	START_NUMBER_CONVERSION // inititiate a number sequence
	#	CONVERT_DIGIT // ( n - n' ) convert a digit from n
	#s	CONVERT_NUMBER // ( n - 0 ) convert all digits in n
	sign	SIGN // ( n - ) prepend sign to number sequence if n is negative
	#>	END_NUMBER_CONVERSION // ( n - a c ) finish number sequence and return address and count
	.r	DOT_R // ( m n - ) print m in right field of n digits
	.	DOT // ( n - ) print n in current number base
	]	RIGHT_SQUARE_BRACKET // enter macro mode
	word	WORD // ( c - ) parse characters up to c from input to here
	:	COLON // start a macro definition
	constant	CONSTANT // ( n - ) give n a name
	variable	VARIABLE // ( n - ) give n a place to be stored at a name
	shift	SHIFT // ( n m - p ) shift n by m bit left for minus and right for positive
	.b	DOT_B // ( n - ) print n in binary
	.d	DOT_D // ( n - ) print n in decimal
	.h	DOT_H // ( n - ) print n in hex
	.s	DOT_S // print number of items on data stack
	dump	dump // ( a n - ) dump n 16-byte rows of memory starting at address a
	words	WORDS // list all words in dictionary
End

Immediates
	[	LEFT_SQUARE_BRACKET // exit macro mode
	(	COMMENT // start of comment till end of line or )
	literal	LITERAL // ( n - ) enter a literal value into a macro
	if	IF // ( n - ) execute following code if top of stack is non-zero
	else	ELSE // otherwise part of an if statement
	endif	ENDIF // end of else or if statement
	begin	BEGIN // start of a loop construct
	again	AGAIN // end of a continuous loop construct
	while	WHILE // ( n - ) conditional choice in a loop construct
	repeat	REPEAT // go back to the begin part
	until	UNTIL // ( n - ) go back to the begin statement if stack is zero
	for	FOR // ( n - ) start of a loop which runs n times
	next	NEXT // end of a for loop
	exit	EXIT // exit macro
	'	TICK // ( - a ) get execution address of following word
	\"	QUOTE // ( - s ) enclose text up to next " in a count prefixed string
	.\"	DOT_QUOTE // print text up until next "
	reveal	RECURSIVE // allow macro to call itself
	;	SEMI_COLON // end a macro
End

Constants
	dbg	debug // set debug level 0 - quiet, 1 state changes, 2 traffic: 2 dbg c!
End
